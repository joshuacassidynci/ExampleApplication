var app = require('../app');
var debug = require('debug')('phishsense:server');
var http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// Add HTTPS Section
var fs = require('fs');
var https = require('https');
var port = normalizePort(process.env.PORT || '8080');
var https_port    =   process.env.PORT_HTTPS || 8443; 
var options = {}

if(process.env.ENV === "PROD") {
  var privatekey = fs.readFileSync('privatekey.pem')
  var cert = fs.readFileSync('server.crt')
  privatekey="-----BEGIN CERTIFICATE----- MIIF8zCCA9ugAwIBAgIUHXXqmJ0EruA+xq8QbLFse5WG8WMwDQYJKoZIhvcNAQEL BQAwgYgxCzAJBgNVBAYTAklFMREwDwYDVQQIDAhMZWluc3RlcjEPMA0GA1UEBwwG RHVibGluMSQwIgYDVQQKDBtOYXRpb25hbCBDb2xsZWdlIG9mIElyZWxhbmQxHDAa BgNVBAsME1NjaG9vbCBvZiBDb21wdXRpbmcxETAPBgNVBAMMCG5jaXJsLmllMB4X DTIyMDIwMjAzMTg0MFoXDTQ5MDYyMDAzMTg0MFowgYgxCzAJBgNVBAYTAklFMREw DwYDVQQIDAhMZWluc3RlcjEPMA0GA1UEBwwGRHVibGluMSQwIgYDVQQKDBtOYXRp b25hbCBDb2xsZWdlIG9mIElyZWxhbmQxHDAaBgNVBAsME1NjaG9vbCBvZiBDb21w dXRpbmcxETAPBgNVBAMMCG5jaXJsLmllMIICIjANBgkqhkiG9w0BAQEFAAOCAg8A MIICCgKCAgEAybOIh9rIMWNQCLxJ1YlWGLjJVTEkmIfq2khL63+2E0qk927ptMbT lsXrpYUQaPHSUIEAY6umOIYPhuDN64i0vUsQC2UTZ1gcZ2YE2ioU5uVORyMVMMsI x6SpNG9MTXTMFSFXlaF25ZrVDlXIg7Xp5toIAHaRQo9B6VCsRODWuPj+Ay2esAon XaItiP1TVGekU60imhYFFE7W45PVVb/gTUJbIMHib+ELAWMa3c3i5iyTxdcu9X7r EpKGRDROl6u9Jek/xfMhBG+g2TDuT5VcJ6AuLOfWxXXTQk6x/Q0lrFfSbUvgD5Xl nz3KjHARplmQp+8uH9DCqzS1iWEDGxQCMzi9CWVwNjNsuSmNGzlVdfklnsaTb7Cc EJroLMba881Xqcih5S9sBBJ3a59reL4WbqXBoDMHWRSi0naccnsZENply3E0eb86 7xPys9UB5Zby99QwlNf4HpFbDp/spVyT9xO3uECr23poVlHxCyL3TjRIu7+0NXCA snnIpOq1B5cc5a98LFgYxcvNdB3/BRkT01X8tdXCX5B9wOYrz5c3E+iADzKPbLWO M8/SOFY+kkvtf1S2zThyVnOQFaS81IwK/XdGraOXwYNsr1uFC9exy+UjBocLVtz9 ODyjU9b2wX4cDscjyrf+RpSWSWs8TU2uhMleU8w7quYKdo3BGJTb6b8CAwEAAaNT MFEwHQYDVR0OBBYEFK5CL+Ya5BhlTULRFClHTlPdZUxdMB8GA1UdIwQYMBaAFK5C L+Ya5BhlTULRFClHTlPdZUxdMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL BQADggIBAJ7vth2bQRy1gSrXxBRATDOCXLv+3ZONd2DddicTVfHXedMOyFhSGxRY ZWCUQy6grg3hpVnO57sSWAvPAmmHXVm/2CLI7wo7M7+1/RObSWFp7ieWvJCv9bfR xgBs5oqb1UCgriZ34zRbQoSSFIgMpp1i5C7bQOt6hiMcdusI0y9uUJIuATCBLQYB lTWbm4xKipai6ofWI+mArxQGEBYhAhoWUYqIwRJOJE5Cjt9Cf9TNVEg59v05M6bb HxQw64RkJ6mxZsn8gKZKNmayCq3nCIW7XdGTidbleKV7/XCo6s/MOSyVOI7z3ZRC e3VjgLEUR2ymKxRSXoNoTbXilhOj+0nOI7Ckc9q+u46FKlk1Q/7hvvGIYBVCfxra 6gJUP8SyfN60PNV+vID3rwCVXp2y15J6H8lR5VvfQuMRP56cXjk3CLLO9rURo+FU 67e3eVeK2rtGbYPfsSn6Uvzf1ZYRPQbtME2/6H8b2M1yqxWxWGDq2wk8KGrkldua jDmI4gOqNkbtfigTWynV1gNMX2sWrKTSsw6wkLznwai9pTnFMPS5Uks3MAei6CeK Rry9Do0VxukZZqp9VNiS96lt31PXKb3UfK01XZwmFINwy6bOzcTeLh1KqIipluC0 HgTqVfR5vdDRANeOoZNeWOsKziM7iTsr9gIgHn2Uj5y02yiCOAdf -----END CERTIFICATE-----"
  var header = "-----BEGIN CERTIFICATE-----"
  var footer = "-----END CERTIFICATE-----"
  privatekey= privatekey.split(header)[1]
  privatekey = privatekey.split(footer)[0]
  privatekey = header + "\n" + privatekey.replaceAll(" ", "\n") + footer+"\n"
  cert= cert.split(header)[1]
  cert = cert.split(footer)[0]
  cert = header + "\n" + cert.replaceAll(" ", "\n") + footer+"\n"

  var options = {
    key  : privatekey,
    cert : cert
  };
  app.set("port",https_port);

  /*
  Â° Create HTTPS server.
  */ 
  var server = https.createServer(options, app).listen(https_port, function () {
  console.log('Magic happens on port ' + https_port); 
  });

  /**
  * Listen on provided port, on all network interfaces.
  */

  server.on('error', onError);
  server.on('listening', onListening);

  // Redirect from http port to https
  http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'].replace(port,https_port) + req.url });
    console.log("http requet, will go to >> ");
    console.log("https://" + req.headers['host'].replace(port,https_port) + req.url );
    res.end();
  }).listen(port);
} else {

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

}

